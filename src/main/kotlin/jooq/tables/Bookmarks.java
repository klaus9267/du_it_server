/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.DutyIt;
import jooq.Keys;
import jooq.tables.Events.EventsPath;
import jooq.tables.Users.UsersPath;
import jooq.tables.records.BookmarksRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookmarks extends TableImpl<BookmarksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>duty_it.bookmarks</code>
     */
    public static final Bookmarks BOOKMARKS = new Bookmarks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarksRecord> getRecordType() {
        return BookmarksRecord.class;
    }

    /**
     * The column <code>duty_it.bookmarks.is_added_to_calendar</code>.
     */
    public final TableField<BookmarksRecord, Boolean> IS_ADDED_TO_CALENDAR = createField(DSL.name("is_added_to_calendar"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>duty_it.bookmarks.event_id</code>.
     */
    public final TableField<BookmarksRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>duty_it.bookmarks.id</code>.
     */
    public final TableField<BookmarksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>duty_it.bookmarks.user_id</code>.
     */
    public final TableField<BookmarksRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>duty_it.bookmarks.created_at</code>.
     */
    public final TableField<BookmarksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>duty_it.bookmarks.updated_at</code>.
     */
    public final TableField<BookmarksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Bookmarks(Name alias, Table<BookmarksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bookmarks(Name alias, Table<BookmarksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>duty_it.bookmarks</code> table reference
     */
    public Bookmarks(String alias) {
        this(DSL.name(alias), BOOKMARKS);
    }

    /**
     * Create an aliased <code>duty_it.bookmarks</code> table reference
     */
    public Bookmarks(Name alias) {
        this(alias, BOOKMARKS);
    }

    /**
     * Create a <code>duty_it.bookmarks</code> table reference
     */
    public Bookmarks() {
        this(DSL.name("bookmarks"), null);
    }

    public <O extends Record> Bookmarks(Table<O> path, ForeignKey<O, BookmarksRecord> childPath, InverseForeignKey<O, BookmarksRecord> parentPath) {
        super(path, childPath, parentPath, BOOKMARKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookmarksPath extends Bookmarks implements Path<BookmarksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BookmarksPath(Table<O> path, ForeignKey<O, BookmarksRecord> childPath, InverseForeignKey<O, BookmarksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookmarksPath(Name alias, Table<BookmarksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookmarksPath as(String alias) {
            return new BookmarksPath(DSL.name(alias), this);
        }

        @Override
        public BookmarksPath as(Name alias) {
            return new BookmarksPath(alias, this);
        }

        @Override
        public BookmarksPath as(Table<?> alias) {
            return new BookmarksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DutyIt.DUTY_IT;
    }

    @Override
    public Identity<BookmarksRecord, Long> getIdentity() {
        return (Identity<BookmarksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookmarksRecord> getPrimaryKey() {
        return Keys.KEY_BOOKMARKS_PRIMARY;
    }

    @Override
    public List<ForeignKey<BookmarksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK5180RCUNAOGKV8WGJ4EGF55XD, Keys.FKDBSHO2E05W5R13FKJQFJMGE5F);
    }

    private transient EventsPath _events;

    /**
     * Get the implicit join path to the <code>duty_it.events</code> table.
     */
    public EventsPath events() {
        if (_events == null)
            _events = new EventsPath(this, Keys.FK5180RCUNAOGKV8WGJ4EGF55XD, null);

        return _events;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>duty_it.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FKDBSHO2E05W5R13FKJQFJMGE5F, null);

        return _users;
    }

    @Override
    public Bookmarks as(String alias) {
        return new Bookmarks(DSL.name(alias), this);
    }

    @Override
    public Bookmarks as(Name alias) {
        return new Bookmarks(alias, this);
    }

    @Override
    public Bookmarks as(Table<?> alias) {
        return new Bookmarks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmarks rename(String name) {
        return new Bookmarks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmarks rename(Name name) {
        return new Bookmarks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmarks rename(Table<?> name) {
        return new Bookmarks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks where(Condition condition) {
        return new Bookmarks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bookmarks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bookmarks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bookmarks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bookmarks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bookmarks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
