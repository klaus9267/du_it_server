/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.DutyIt;
import jooq.Keys;
import jooq.tables.Events.EventsPath;
import jooq.tables.records.ViewsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Views extends TableImpl<ViewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>duty_it.views</code>
     */
    public static final Views VIEWS = new Views();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewsRecord> getRecordType() {
        return ViewsRecord.class;
    }

    /**
     * The column <code>duty_it.views.count</code>.
     */
    public final TableField<ViewsRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>duty_it.views.event_id</code>.
     */
    public final TableField<ViewsRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>duty_it.views.id</code>.
     */
    public final TableField<ViewsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Views(Name alias, Table<ViewsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Views(Name alias, Table<ViewsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>duty_it.views</code> table reference
     */
    public Views(String alias) {
        this(DSL.name(alias), VIEWS);
    }

    /**
     * Create an aliased <code>duty_it.views</code> table reference
     */
    public Views(Name alias) {
        this(alias, VIEWS);
    }

    /**
     * Create a <code>duty_it.views</code> table reference
     */
    public Views() {
        this(DSL.name("views"), null);
    }

    public <O extends Record> Views(Table<O> path, ForeignKey<O, ViewsRecord> childPath, InverseForeignKey<O, ViewsRecord> parentPath) {
        super(path, childPath, parentPath, VIEWS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ViewsPath extends Views implements Path<ViewsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ViewsPath(Table<O> path, ForeignKey<O, ViewsRecord> childPath, InverseForeignKey<O, ViewsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ViewsPath(Name alias, Table<ViewsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ViewsPath as(String alias) {
            return new ViewsPath(DSL.name(alias), this);
        }

        @Override
        public ViewsPath as(Name alias) {
            return new ViewsPath(alias, this);
        }

        @Override
        public ViewsPath as(Table<?> alias) {
            return new ViewsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DutyIt.DUTY_IT;
    }

    @Override
    public Identity<ViewsRecord, Long> getIdentity() {
        return (Identity<ViewsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ViewsRecord> getPrimaryKey() {
        return Keys.KEY_VIEWS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ViewsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_VIEWS_UKI590VQERY9RU4C1V3NC3FMKN3);
    }

    @Override
    public List<ForeignKey<ViewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKBMSLLKMG09PXDBVHTVEW25HU);
    }

    private transient EventsPath _events;

    /**
     * Get the implicit join path to the <code>duty_it.events</code> table.
     */
    public EventsPath events() {
        if (_events == null)
            _events = new EventsPath(this, Keys.FKBMSLLKMG09PXDBVHTVEW25HU, null);

        return _events;
    }

    @Override
    public Views as(String alias) {
        return new Views(DSL.name(alias), this);
    }

    @Override
    public Views as(Name alias) {
        return new Views(alias, this);
    }

    @Override
    public Views as(Table<?> alias) {
        return new Views(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Views rename(String name) {
        return new Views(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Views rename(Name name) {
        return new Views(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Views rename(Table<?> name) {
        return new Views(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views where(Condition condition) {
        return new Views(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Views where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Views where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Views where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Views where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Views whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
